import defaultValue from "@mindful-web/marko-core/utils/default-value";
import { get, getAsObject } from "@mindful-web/object-path";
import { dateToTimestamp, fetchEmailAd } from "@mindful-web/marko-newsletters-native-x/utils";
import { convertAdToContent } from "@mindful-web/marko-newsletters-native-x/utils";
import queryFragment from "@industrial-media/common/graphql/fragments/content-list";
import chunk from "@industrial-media/common/utils/chunk";
import moment from "moment";

$ const { config } = out.global;

$ const { newsletter, date, primaryColor } = input;

$ const nativeX = (date >= moment(config.get("mindfulAdsDate"))) ? config.getAsObject("nativeX") : false;
$ const sectionName = defaultValue(input.sectionName, "Main");
$ const limit = defaultValue(input.limit, 30);
$ const skip = defaultValue(input.skip, 0);

$ const queryParams = {
  date: date.valueOf(),
  newsletterId: newsletter.id,
  sectionName,
  limit,
  skip,
  queryFragment,
};

<marko-web-query|{ nodes }| name="newsletter-scheduled-content" collapsible=false params=queryParams>
  $ const fetchParams = {
    uri: nativeX.uri,
    timestamp: dateToTimestamp(date),
  };
  $ const promises = [
    fetchEmailAd({ ...fetchParams, placementId: get(nativeX, `placements.${newsletter.alias}.inline-1`) }),
    fetchEmailAd({ ...fetchParams, placementId: get(nativeX, `placements.${newsletter.alias}.inline-2`) }),
    fetchEmailAd({ ...fetchParams, placementId: get(nativeX, `placements.${newsletter.alias}.inline-3`) }),
    fetchEmailAd({ ...fetchParams, placementId: get(nativeX, `placements.${newsletter.alias}.inline-4`) }),
    fetchEmailAd({ ...fetchParams, placementId: get(nativeX, `placements.${newsletter.alias}.inline-5`) }),
  ];


  $ function distribute({ nodes = [], ads = [], stacks = false } = {}) {
    const numberOfStacks = (stacks) ? stacks : (ads.length || 0) + 1;

    const minimumPerStack = Math.floor(nodes.length / numberOfStacks);

    const stackLengths = Array.from(Array(numberOfStacks), () => minimumPerStack);

    for (let i = 0; i < nodes.length - (numberOfStacks * minimumPerStack); i += 1) {
      stackLengths[i] += 1;
    }

    const chunked = [];
    let n = 0;
    for (let i = 0; i < stackLengths.length; i += 1) {
      const ad = ads[i];
      const start = n;

      const length = stackLengths[i];
      n += length;
      const end = start + length;

      chunked.push(...nodes.slice(start, end));
      if (ad) chunked.push(ad);
    }

    return chunked;
  }

  <marko-web-resolve|{ resolved }| promise=Promise.all(promises)>
    $ const ads = resolved.filter(item => item.data);
    <if(nodes && nodes.length)>
      $ const stacks = (ads && ads.length == 2) ? 2 : 0;
      $ const items = distribute({ nodes, ads, stacks });
      <for|item| of=items>
        <if(item.data && item.data.campaign)>
          $ const { data } = item;
          $ const dpmArgs = {
            lc: "Advertising",
            lkw: "sponsoredContent",
            ln: `${get(data, "advertiser.name" || "creative.name")}`,
            lcv: `${get(data, "campaign.name")}`,
          };
          $ const linkAttrs = {
            ...(getAsObject(input, "link.attrs")),
            ...data.elements.a,
          };
          <common-ad-full-native-block
            date=date
            newsletter=newsletter
            section-name=null
            content=convertAdToContent(data)
            dpm-args=dpmArgs
            tenant=get(nativeX, "tenant")
            creative-id=get(data, "creative.mindfulCreativeId")
            primary-color=primaryColor
            link-attrs=linkAttrs
          />
        </if>
        <else>
          <common-mindful-feed-block
            nodes=[item]
            date=date
            newsletter=newsletter
            primary-color=primaryColor
          />
        </else>
      </for>
    </if>
    <else>
      <if(ads && ads.length)>
        <for|ad, i| of=ads>
          $ const { data } = ads[i];
          $ const dpmArgs = {
            lc: "Advertising",
            lkw: "sponsoredContent",
            ln: `${get(data, "advertiser.name" || "creative.name")}`,
            lcv: `${get(data, "campaign.name")}`,
          };
          $ const linkAttrs = {
            ...(getAsObject(input, "link.attrs")),
            ...data.elements.a,
          };
          <common-ad-full-native-block
            date=date
            newsletter=newsletter
            section-name=null
            content=convertAdToContent(data)
            dpm-args=dpmArgs
            tenant=get(nativeX, "tenant")
            creative-id=get(data, "creative.mindfulCreativeId")
            primary-color=primaryColor
            link-attrs=linkAttrs
          />
        </for>
      </if>
    </else>
  </marko-web-resolve>
</marko-web-query>
